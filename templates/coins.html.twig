{# shop.html.twig - Complete file with purchase confirmation popup #}
<script src="{{ asset('js/stravabucks.js') }}"></script>

{# Include CSS for coins display and shop #}
<link rel="stylesheet" href="{{ asset('css/coins.css') }}">

{# Floating coin button #}
<button class="floating-button-coin" onclick="CoinPopup();">
    <img src="{{ asset('images/coins.png') }}" alt="coins button">
    <div class="circle-container single-digit">{{ stravabucks }}</div>
</button>

{# Shop overlay #}
<div id="coinsoverlay">
    <div class="shop-window" id="coinspopup">
        <div class="shop-menu">
            <button class="menu-button active" data-tab="shop">Shop</button>
            <button class="menu-button" data-tab="inventory">Inventory</button>
            <button class="menu-button" data-tab="buycoins">Buy Coins</button>
            <button class="close-button" onclick="CoinclosePopup()">&times;</button>
        </div>

        <div class="shop-content" id="shopContent"></div>  {# Dynamically populated #}

        <div class="buy-coins-section" id="buyCoinsSection" style="display: none;">
            <script async src="https://js.stripe.com/v3/buy-button.js"></script>
            <stripe-buy-button
                    buy-button-id="buy_btn_1RHMV9KL6jD48P382Ot9hYke"
                    publishable-key="pk_live_51RHM6LKL6jD48P38kJwWVFZZX2nSULCZid34FeTAlCy7K5W92tFxy3kaxF9hNVYLR64jhQCxneg2Ne83sBVDnEYW00ewn8n5ED">
            </stripe-buy-button>
            <p class="paypaypal">Of Betaal met Paypal:</p>
            <div id="payment_options"></div>
            <div class="paypal">
                <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
                    <input type="hidden" name="cmd" value="_s-xclick" />
                    <input type="hidden" name="hosted_button_id" value="VUDDK5FRYV38Q" />
                    <input type="hidden" name="currency_code" value="EUR" />
                    <input type="image" src="https://www.paypalobjects.com/nl_NL/BE/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" title="PayPal â€“ de veiligere, gemakkelijkere manier om online te betalen!" alt="Nu kopen" />
                </form>
            </div>
        </div>
    </div>
</div>


{# Purchase confirmation popup #}
<div id="purchaseConfirmOverlay" style="display: none;">
    <div id="purchaseConfirmPopup">
        <div class="purchase-popup-header">
            <h3>Bevestig Aankoop</h3>
            <button class="close-button" onclick="closePurchasePopup()">&times;</button>
        </div>
        <div class="purchase-popup-content">
            <div class="item-preview">
                <img id="previewItemImage" src="" alt="Item Preview">
                <h4 id="previewItemName"></h4>
            </div>
            <div class="quantity-selector">
                <p>Selecteer aantal:</p>
                <div class="quantity-controls">
                    <button onclick="decreaseQuantity()">-</button>
                    <input type="number" id="itemQuantity" value="1" min="1" max="10">
                    <button onclick="increaseQuantity()">+</button>
                </div>
            </div>
            <div class="total-cost">
                <p>Totale kosten: <span id="totalCost">15</span>
                    <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon" style="width: 20px; height: auto; vertical-align: middle;">
                </p>
            </div>
            <div class="action-buttons">
                <button class="cancel-button" onclick="closePurchasePopup()">Annuleren</button>
                <button class="confirm-button" onclick="confirmPurchase()">Kopen</button>
            </div>
        </div>
    </div>
</div>


{# JavaScript for shop functionality #}
<script>
    // Global variables to store selected item details
    let selectedItem = {
        name: '',
        price: 0,
        imageUrl: '',
        element: null, // Dit is het .price element
        itemIdentifier: '' // bv. 'trap', 'fake', 'poison' - BELANGRIJK!
    };
    let currentInventory = { trap: 0, fake: 0, poison: 0 };

    // Menu tab functionality
    const menu = document.querySelector('.shop-menu');
    const menuButtons = menu.querySelectorAll('.menu-button');
    const shopContent = document.getElementById('shopContent');
    const buyCoinsSection = document.getElementById('buyCoinsSection');

    // (De statische 'inventoryContent' variabele is niet meer nodig als we renderInventory gebruiken)

    function confirmPurchase() {
        const quantity = parseInt(document.getElementById('itemQuantity').value);
        const totalCost = selectedItem.price * quantity;
        const itemNameForDisplay = selectedItem.name;
        const itemIdentifierForDB = selectedItem.itemIdentifier;

        if (!itemIdentifierForDB) {
            showNotification('Fout', 'Item identifier niet gevonden. Kan aankoop niet voltooien.', 'error');
            console.error("itemIdentifier is leeg in confirmPurchase. selectedItem:", selectedItem);
            return;
        }

        // STAP 1: Probeer Stravabucks af te schrijven (server-side)
        fetch('/use-stravabucks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ amount: totalCost, itemName: `${quantity}x ${itemNameForDisplay}` })
        })
            .then(response => response.json())
            .then(stravabucksData => {
                if (stravabucksData.status === 'success') {
                    // Stravabucks succesvol afgeschreven. Het nieuwe saldo is stravabucksData.current_balance
                    // STAP 2: Probeer item aan inventaris toe te voegen (server-side)
                    fetch('/add-to-inventory', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ itemName: itemIdentifierForDB, quantity: quantity })
                    })
                        .then(response => response.json())
                        .then(inventoryData => {
                            if (inventoryData.status === 'success') {
                                // Zowel Stravabucks afschrijven als item toevoegen aan inventaris is gelukt.
                                // Sla notificatie op voor weergave NA het herladen.
                                localStorage.setItem('stravabucks_notification', JSON.stringify({
                                    title: 'Aankoop Succesvol!',
                                    message: `${quantity}x ${itemNameForDisplay} gekocht voor ${totalCost} Stravabucks en toegevoegd aan je inventaris.`,
                                    type: 'success'
                                }));
                                // Herlaad de pagina
                                location.reload();
                            } else {
                                // Stravabucks zijn afgeschreven, maar item kon niet aan inventaris worden toegevoegd.
                                // Dit is een lastige situatie. Idealiter zou er een "rollback" moeten zijn
                                // van de Stravabucks-transactie, maar dat is complexer.
                                // Voor nu: toon een duidelijke foutmelding, sla notificatie op en herlaad
                                // zodat de gebruiker in ieder geval het correcte (lagere) Stravabucks-saldo ziet.
                                localStorage.setItem('stravabucks_notification', JSON.stringify({
                                    title: 'Deels Mislukte Aankoop',
                                    message: `Je Stravabucks zijn afgeschreven, maar ${itemNameForDisplay} kon niet aan de inventaris worden toegevoegd: ${inventoryData.message}. Nieuw saldo: ${stravabucksData.current_balance}.`,
                                    type: 'error'
                                }));
                                location.reload(); // Herlaad om het nieuwe saldo te tonen, zelfs bij deze fout
                            }
                        })
                        .catch(error => {
                            // Ernstige fout bij het toevoegen aan de inventaris.
                            // Stravabucks zijn mogelijk wel afgeschreven.
                            console.error('Error adding to inventory:', error);
                            localStorage.setItem('stravabucks_notification', JSON.stringify({
                                title: 'Fout bij Inventaris',
                                message: `Er ging iets mis bij het toevoegen aan de inventaris na je aankoop. Controleer je saldo en inventaris. Saldo zou nu ${stravabucksData.current_balance} moeten zijn.`,
                                type: 'error'
                            }));
                            location.reload(); // Herlaad om het nieuwe saldo te tonen
                        });
                } else {
                    // Fout bij het afschrijven van Stravabucks (bv. niet genoeg saldo)
                    showNotification('Aankoop Mislukt', stravabucksData.message, 'error');
                    // De popup blijft open zodat de gebruiker het kan proberen op te lossen.
                    // De pagina wordt hier NIET herladen.
                }
            })
            .catch(error => {
                console.error('Error using stravabucks:', error);
                showNotification('Fout', 'Kon aankoop niet voltooien. Controleer je verbinding.', 'error');
                // De pagina wordt hier NIET herladen.
            });
    }

    function fetchInventory() {
        fetch('/get-inventory')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' && data.inventory) {
                    currentInventory = data.inventory;
                } else {
                    console.warn('Failed to fetch inventory or inventory empty:', data.message);
                    currentInventory = { trap: 0, fake: 0, poison: 0 };
                }
                if (document.querySelector('.menu-button[data-tab="inventory"].active')) {
                    renderInventory();
                }
            })
            .catch(error => {
                console.error('Error fetching inventory:', error);
                currentInventory = { trap: 0, fake: 0, poison: 0 };
                if (document.querySelector('.menu-button[data-tab="inventory"].active')) {
                    renderInventory();
                }
            });
    }

    function renderInventory() {
        const inventoryTabActive = document.querySelector('.menu-button[data-tab="inventory"].active');
        if (!inventoryTabActive) return;

        let inventoryHTML = '<h2>Inventaris</h2>';
        const hasItems = Object.values(currentInventory).some(count => count > 0);

        if (!hasItems) {
            inventoryHTML += '<div class="empty-inventory"><p>Je hebt nog geen items in je inventaris.</p></div>';
        } else {
            inventoryHTML += '<div class="inventory-grid">';
            const itemImagePaths = {
                trap: "{{ asset('images/trap.png') }}",
                fake: "{{ asset('images/fake.png') }}",
                poison: "{{ asset('images/poison.png') }}"
            };
            const itemDisplayNames = { trap: "Vallen", fake: "Fake Hexagons", poison: "Gif" };

            for (const itemType in currentInventory) {
                if (currentInventory[itemType] > 0) {
                    const imagePath = itemImagePaths[itemType] || "{{ asset('images/default_item.png') }}";
                    const displayName = itemDisplayNames[itemType] || itemType.charAt(0).toUpperCase() + itemType.slice(1);
                    inventoryHTML += `
                    <div class="inventory-item">
                        <img src="${imagePath}" alt="${displayName}">
                        <p>${displayName}: ${currentInventory[itemType]}</p>
                    </div>`;
                }
            }
            inventoryHTML += '</div>';
        }
        shopContent.innerHTML = inventoryHTML;
        shopContent.style.display = 'block'; // Zorg dat de content zichtbaar is
        buyCoinsSection.style.display = 'none';
    }

    menuButtons.forEach(button => {
        button.addEventListener('click', function() {
            menuButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            const tab = this.dataset.tab;

            shopContent.innerHTML = ''; // Leegmaken voor nieuwe content

            if (tab === 'shop') {
                buyCoinsSection.style.display = 'none';
                shopContent.style.display = 'flex';
                shopContent.innerHTML = `
                    <div class="hexagon-container">
                        <img src="{{ asset('images/trap.png') }}" alt="Trap">
                        <div class="price" data-item="trap" data-price="15">
                            <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                        </div>
                    </div>
                    <div class="hexagon-container">
                        <img src="{{ asset('images/fake.png') }}" alt="Fake Hexagon">
                        <div class="price" data-item="fake" data-price="15">
                            <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                        </div>
                    </div>
                    <div class="hexagon-container">
                        <img src="{{ asset('images/poison.png') }}" alt="Poison">
                        <div class="price" data-item="poison" data-price="15">
                            <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                        </div>
                    </div>`;
                document.querySelectorAll('.price').forEach(priceElement => {
                    priceElement.addEventListener('click', function() { toggleActive(this); });
                });
            } else if (tab === 'inventory') {
                buyCoinsSection.style.display = 'none';
                shopContent.style.display = 'block'; // Wordt 'grid' door .inventory-grid CSS
                fetchInventory(); // Haalt data op en triggert renderInventory
            } else if (tab === 'buycoins') {
                shopContent.style.display = 'none';
                buyCoinsSection.style.display = 'block';
            }
        });
    });

    const coinoverlay = document.getElementById('coinsoverlay');
    const coinpopup = document.getElementById('coinspopup');

    coinoverlay.addEventListener('click', function (e) {
        if (e.target === coinoverlay) { // Alleen sluiten bij klik op overlay zelf
            CoinclosePopup();
        }
    });

    function CoinPopup() {
        document.getElementById('coinsoverlay').style.display = 'block';
        document.getElementById('coinspopup').style.display = 'block'; // Zorg dat de popup zichtbaar is

        // Stel een default actieve tab in als de popup opent, of refresh de huidige
        let activeTabButton = document.querySelector('.shop-menu .menu-button.active');
        if (!activeTabButton) { // Als geen enkele tab actief is, maak shop actief
            activeTabButton = document.querySelector('.shop-menu .menu-button[data-tab="shop"]');
        }
        if (activeTabButton) {
            // Forceer een 'klik' om de content van de (mogelijk) al actieve tab te herladen/tonen
            activeTabButton.click();
        }
    }

    function CoinclosePopup() {
        document.getElementById('coinsoverlay').style.display = 'none';
    }

    function openPurchasePopup(element) {
        selectedItem.element = element;
        const itemContainer = element.closest('.hexagon-container');
        selectedItem.name = itemContainer.querySelector('img').alt;
        selectedItem.price = parseInt(element.dataset.price);
        selectedItem.imageUrl = itemContainer.querySelector('img').src;
        selectedItem.itemIdentifier = element.dataset.item; // Essentieel!

        document.getElementById('previewItemName').textContent = selectedItem.name;
        document.getElementById('previewItemImage').src = selectedItem.imageUrl;
        document.getElementById('itemQuantity').value = 1;
        updateTotalCost();
        document.getElementById('purchaseConfirmOverlay').style.display = 'flex';
    }

    function closePurchasePopup() {
        document.getElementById('purchaseConfirmOverlay').style.display = 'none';
    }

    function increaseQuantity() {
        const quantityInput = document.getElementById('itemQuantity');
        let currentValue = parseInt(quantityInput.value);
        if (currentValue < 10) { quantityInput.value = ++currentValue; updateTotalCost(); }
    }

    function decreaseQuantity() {
        const quantityInput = document.getElementById('itemQuantity');
        let currentValue = parseInt(quantityInput.value);
        if (currentValue > 1) { quantityInput.value = --currentValue; updateTotalCost(); }
    }

    function updateTotalCost() {
        const quantity = parseInt(document.getElementById('itemQuantity').value);
        document.getElementById('totalCost').textContent = selectedItem.price * quantity;
    }

    function toggleActive(element) {
        document.querySelectorAll('.price').forEach(item => item.classList.remove('active'));
        element.classList.add('active');
        openPurchasePopup(element);
    }

    document.addEventListener('DOMContentLoaded', function() {
        fetchStravabucks();
        fetchInventory();

        // Verwijder 'active' class van alle knoppen initieel
        menuButtons.forEach(btn => btn.classList.remove('active'));

        // Stel de initiÃ«le actieve tab in (bijvoorbeeld 'shop')
        const initialTabButton = document.querySelector('.menu-button[data-tab="shop"]');
        if (initialTabButton) {
            initialTabButton.click(); // Simuleert een klik, maakt actief en laadt content
        } else {
            // Fallback als de knop niet gevonden wordt (zou niet mogen)
            shopContent.style.display = 'flex';
            buyCoinsSection.style.display = 'none';
            // Laad shop content handmatig als .click() faalt
            shopContent.innerHTML = `
                <div class="hexagon-container">
                    <img src="{{ asset('images/trap.png') }}" alt="Trap">
                    <div class="price" data-item="trap" data-price="15">
                        <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                    </div>
                </div>
                <div class="hexagon-container">
                    <img src="{{ asset('images/fake.png') }}" alt="Fake Hexagon">
                    <div class="price" data-item="fake" data-price="15">
                        <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                    </div>
                </div>
                <div class="hexagon-container">
                    <img src="{{ asset('images/poison.png') }}" alt="Poison">
                    <div class="price" data-item="poison" data-price="15">
                        <img src="{{ asset('images/stravabucks.png') }}" alt="Coin Icon"> <span>15</span>
                    </div>
                </div>`;
            document.querySelectorAll('.price').forEach(priceElement => {
                priceElement.addEventListener('click', function() { toggleActive(this); });
            });
        }


        const collectKudosBtn = document.getElementById('collect-kudos-btn');
        if (collectKudosBtn) {
            collectKudosBtn.addEventListener('click', function() {
                const kudosToCoins = parseInt(this.dataset.amount || 0);
                if (kudosToCoins > 0) {
                    addStravabucks(kudosToCoins);
                    this.disabled = true;
                    this.textContent = 'Collected!';
                }
            });
        }
    });
</script>